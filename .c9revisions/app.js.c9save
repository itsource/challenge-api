{"ts":1363278974644,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// ==================================================================\n// After connecting to mongo start listening for requests\n// ==================================================================\n\nvar mongo = require('mongodb');\nvar BSON = mongo.BSONPure;\nvar express = require('express');\nvar http = require('http');\nvar xml2js = require('xml2js');\n\nvar app = express();\napp.use(express.bodyParser());\n\nvar db = new mongo.Db('challengedb',\n    new mongo.Server('ds033047.mongolab.com', 33047, {auto_reconnect: true}),\n    {w: 'majority'});\n\nconsole.log('connecting to mongo');\ndb.open(function(err, client) {\n    if (err) {\n        console.log('error opening db: ' + err);\n    } else {\n        db.addListener(\"error\", function(error){\n            console.log(\"db error: \" + error);\n        });\n\n        client.authenticate('api-user', 'challengedb', function(err, success) {\n            if (err) {\n                console.log('error authenticating with database');\n            } else {\n                var port = 8080;\n                app.listen(port, function () {\n                    console.log('listening on ' + port);\n                });\n            }\n        });\n    }\n});\n\n\n// ==================================================================\n// Routes\n// ==================================================================\n\napp.get('/', function(req, res, next) {\n    res.setHeader('Content-Type', 'text/html');\n    res.send('<a href=\"feed\">Challenges</a>');\n});\n\n\n/**\n * Returns the complete feed\n */\napp.get('/feed', function(req, res, next) {\n    db.collection('challenges', function(err, collection) {\n        if (err) {\n          console.log(err);\n          return next(err);\n        } else {\n            var feed = { challenges: [] };\n\n            var stream = collection.find().stream();\n\n            stream.on('data', function(data) {\n                feed.challenges.push(data);\n            });\n\n            stream.on('end', function() {\n               res.json(feed);\n            });\n        }\n    })\n});\n\n\n/**\n * Returns the requested (\"bookmarked\") challenges\n */\napp.put('/bookmarks', function(req, res, next) {\n    var ids = req.body.ids;\n    getBookmarkedChallenges(ids, function(err, challenges) {\n        if (err) {\n            console.log(err);\n            return next(err);\n        } else {\n            var result = { 'challenges': challenges };\n            res.json(result);\n        }\n    });\n});\n\n\n/**\n * Returns the challenge.gov source feed in JSON format\n */\napp.get('/remotefeed', function(req, res, next) {\n    getFeed(function(err, json) {\n        if (err) {\n            console.log(err);\n            return next(err);\n        } else {\n            res.json(json);\n        }\n    });\n});\n\n\n/**\n * Start a harvest job\n */\napp.post('/jobs/harvest', function(req, res, next) {\n\tgetFeed(function(err, data) {\n\t\tif (err) {\n\t\t\treturn next(err);\n\t\t} else {\n\t\t\tsaveFeed(data, function(err, success) {\n\t\t\t\tif (err) {\n                    console.log(err);\n                    return next(err);\n                } else {\n                    res.json(data)\n                }\n            });\n        }\n    });\n\n});\n\n\n// ==================================================================\n// Implementation\n// ==================================================================\n\n/**\n * Returns the latest government challenges as a javascript object.\n * @param callback\n */\nfunction getFeed(callback)\n{\n    var options = {\n        host: 'challenge.gov',\n        path: '/api/challenges.xml'\n    };\n\n    http.request(options, function(resp) {\n        var xml = '';\n\n        resp.on('data', function(chunk) {\n            xml += chunk;\n        });\n\n        resp.on('end', function() {\n            var parseOptions = {\n                \"explicitArray\": false,\n                \"explicitRoot\": false\n            };\n\n            xml2js.parseString(xml, parseOptions, function(err, data) {\n                if (err) {\n                    return callback(err);\n                } else {\n                    callback(null, data);\n                }\n            });\n        })\n    }).end();\n};\n\n\nfunction saveFeed(data, callback) {\n    data.challenge.reverse().forEach(function(item) {\n        db.collection('challenges', function(err, collection) {\n            if (err) {\n                return callback(err);\n            } else {\n                collection.findOne({title: item.title}, function(err, entry) {\n                    if (err) {\n                        return callback(err);\n                    } else {\n                        if (entry) {\n                            console.log('entry exists: ' + entry.title);\n                        } else {\n                            collection.save(item, function(err, saved) {\n                                if (err) {\n                                    return callback(err);\n                                } else {\n                                    console.log(\"saved: \" + item.title);\n                                }\n                            });\n                        }\n                    }\n                });\n            }\n        })\n    });\n\n    callback(null, true);\n};\n\n\nfunction getBookmarkedChallenges(ids, callback) {\n    var results = [];\n\n    db.collection('challenges', function(err, collection) {\n        if (err) {\n            return callback(err);\n        } else {\n            var count = ids.length;\n            ids.forEach(function(id) {\n                var oid = BSON.ObjectID(id);\n                collection.findOne({_id: oid}, function(err, challenge) {\n                    if (err) {\n                        return callback(err);\n                    } else {\n                        console.log(challenge);\n                        results.push(challenge);\n\n                        count--;\n                        if(!count) {\n                            callback(null, results);\n                        }\n                    }\n                });\n            });\n        }\n    });\n};\n\n\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":5982}]],"length":5982}
{"contributors":[],"silentsave":true,"ts":1363279033987,"patch":[[{"diffs":[[0,"dy.ids;\n"],[1,"    console.log()\n"],[0,"    getB"]],"start1":2155,"start2":2155,"length1":16,"length2":34}]],"length":6000,"saved":false}
{"ts":1363279045324,"patch":[[{"diffs":[[0,"ole.log("],[1,"\"/bookmarks:\""],[0,")\n    ge"]],"start1":2171,"start2":2171,"length1":16,"length2":29}]],"length":6013,"saved":false}
{"ts":1363279046554,"patch":[[{"diffs":[[0,"okmarks:"],[1," "],[0,"\")\n    g"]],"start1":2183,"start2":2183,"length1":16,"length2":17}]],"length":6014,"saved":false}
{"ts":1363279051567,"patch":[[{"diffs":[[0,"le.log(\""],[1,"GET "],[0,"/bookmar"]],"start1":2172,"start2":2172,"length1":16,"length2":20}]],"length":6018,"saved":false}
{"ts":1363279055220,"patch":[[{"diffs":[[0,"marks: \""],[1," + "],[0,")\n    ge"]],"start1":2189,"start2":2189,"length1":16,"length2":19}]],"length":6021,"saved":false}
{"ts":1363279062258,"patch":[[{"diffs":[[0,"ks: \" + "],[1,"ids"],[0,")\n    ge"]],"start1":2192,"start2":2192,"length1":16,"length2":19}]],"length":6024,"saved":false}
